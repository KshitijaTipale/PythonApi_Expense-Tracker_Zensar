-- Create Users table
CREATE TABLE Users (
    UserID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100),
    Email VARCHAR2(100)
);

-- Create Categories table
CREATE TABLE Categories (
    CategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName VARCHAR2(100) UNIQUE
);

-- Create Expenses table
CREATE TABLE Expenses (
    ExpenseID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UserID NUMBER,
    CategoryID NUMBER,
    Amount NUMBER(10, 2),
    ExpenseDate DATE DEFAULT SYSDATE,
    CONSTRAINT fk_user FOREIGN KEY (UserID) REFERENCES Users(UserID),
    CONSTRAINT fk_category FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

-- Insert sample data into Users
INSERT INTO Users (Name, Email) VALUES ('David Miller', 'david.miller@example.com');
INSERT INTO Users (Name, Email) VALUES ('Eve Taylor', 'eve.taylor@example.com');
INSERT INTO Users (Name, Email) VALUES ('Frank White', 'frank.white@example.com');

-- Insert sample data into Categories
INSERT INTO Categories (CategoryName) VALUES ('Health');
INSERT INTO Categories (CategoryName) VALUES ('Education');
INSERT INTO Categories (CategoryName) VALUES ('Entertainment');

-- Insert sample data into Expenses
BEGIN
    INSERT INTO Expenses (UserID, CategoryID, Amount, ExpenseDate) VALUES (1, 1, 250.00, SYSDATE - 5);
    INSERT INTO Expenses (UserID, CategoryID, Amount, ExpenseDate) VALUES (2, 2, 500.00, SYSDATE - 3);
    INSERT INTO Expenses (UserID, CategoryID, Amount, ExpenseDate) VALUES (3, 3, 150.00, SYSDATE - 1);
    COMMIT;
END;

-- Select data from Users, Categories, and Expenses tables
SELECT * FROM Users;
SELECT * FROM Categories;
SELECT * FROM Expenses;

-- Create procedure to insert expense
CREATE OR REPLACE PROCEDURE InsertExpense(
    p_UserID IN NUMBER,
    p_CategoryID IN NUMBER,
    p_Amount IN NUMBER,
    p_ExpenseDate IN DATE DEFAULT SYSDATE
)
IS
BEGIN
    INSERT INTO Expenses (UserID, CategoryID, Amount, ExpenseDate)
    VALUES (p_UserID, p_CategoryID, p_Amount, NVL(p_ExpenseDate, SYSDATE));
END;
/

-- Call the InsertExpense procedure
BEGIN
    InsertExpense(1, 1, 300.00); 
    InsertExpense(2, 2, 400.00, SYSDATE - 7); 
END;

-- Create ExpenseLogs table
CREATE TABLE ExpenseLogs (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ExpenseID NUMBER,
    LogMessage VARCHAR2(200),
    LogDate DATE DEFAULT SYSDATE
);

-- Create trigger to log expense insertions
CREATE OR REPLACE TRIGGER LogExpenseInsert
AFTER INSERT ON Expenses
FOR EACH ROW
BEGIN
    INSERT INTO ExpenseLogs (ExpenseID, LogMessage)
    VALUES (:NEW.ExpenseID, 'Expense added for UserID ' || :NEW.UserID || ', CategoryID ' || :NEW.CategoryID || ', Amount ' || :NEW.Amount);
END;
/

-- Insert sample log entries into ExpenseLogs
BEGIN
    INSERT INTO ExpenseLogs (ExpenseID, LogMessage, LogDate)
    VALUES (1, 'Expense added for UserID 1, CategoryID 1, Amount 250.00', SYSDATE - 2);

    INSERT INTO ExpenseLogs (ExpenseID, LogMessage, LogDate)
    VALUES (2, 'Expense added for UserID 2, CategoryID 2, Amount 500.00', SYSDATE - 1);

    INSERT INTO ExpenseLogs (ExpenseID, LogMessage, LogDate)
    VALUES (3, 'Expense added for UserID 3, CategoryID 3, Amount 150.00', SYSDATE);

    COMMIT;
END;

-- Select data from Expenses and ExpenseLogs tables
SELECT * FROM Expenses;
SELECT * FROM ExpenseLogs;
